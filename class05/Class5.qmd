---
title: "Class 5: Data Visualization"
author: "Sejal (A15945666)"
format: html
---

## Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package. 

To compare these let's play with the inbuilt`cars` dataset. 

```{r}
head(cars)
```

To use "base" R I can simply call the `plot()` function" 

```{r}
plot(cars)
```
To use `ggplot` package I first need to install it with the function `install.packages("ggplot2")`. 

I will run this in the R console (i.e. the R brain) as I do not want to re-install it every time I render my report...

The main function in this package is called `ggplot()`. Can I just call it

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I need always at least 3 things. 

- **data** (i.e. what I want to plot)
- **aes** the aesthetic mapping of the data to the plot I want. 
- **the geoms** i.e How I want to plot the data


```{r}
ggplot(data=cars)+
  aes(x=speed, y=dist)+
  geom_point()
```

If I want to more things I can keep adding layers, e.g. 

```{r}
ggplot(data=cars)+
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth()
```

GG plot is much more verbose than base R plots for standard plots but it has a consistent layer system that I can use to make just about any plot. 

Let's make a pliot with a straight line fit - i.e a linear model and no standard error shown. 

```{r}
ggplot(data=cars)+
  aes(x=speed, y=dist)+
  geom_point()+
  geom_smooth(method="lm", se=FALSE)+
  labs(title="Distance versus Speed for Older Cars", subtitle="Best Fit Model", x= "Speed mph", y="Distance meters")+
  theme_bw()
```







## A more complicated plot

Let's plot some gene expression data
The code below reads the results of a differential expression analysis where a new anti-viral drug is being tested.

```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

> Q. how many genes are in the dataset?

```{r}
nrow(genes)
```

> Q How can we summerize that last column - the "State" column?

```{r}
table(genes[,"State"])
```


```{r}
p <- ggplot(genes)+
  aes(x=Condition1, y=Condition2, col=State)+
  geom_point()
```

I can now just call `p` when I want to plot or add to it. 

```{r}
p + labs(title="Gene expression changes upon drug treatment", x="Control", y="Drug treated")+ scale_colour_manual( values=c("blue","gray","red") )
```

## Going Further

Here I read a slightly larger dataset 

```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

```{r}
ggplot(gapminder)+
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)+
  geom_point(alpha=0.5)
```



A very useful layer to add sometimes is for "faceting". 

```{r}
ggplot(gapminder)+
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop)+
  geom_point(alpha=0.5)+
  facet_wrap(~continent)
```
